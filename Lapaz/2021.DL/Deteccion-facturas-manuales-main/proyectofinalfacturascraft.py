# -*- coding: utf-8 -*-
"""ProyectoFinalFacturasCRAFT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EUW6mO2W-N6vGc4FsOLLlngvRbCvcw1P
"""

!pip install keras-ocr

!pip install openpyxl

import matplotlib.pyplot as plt
import keras_ocr
import os
import numpy as np
import pandas as pd
from array import array

from google.colab import drive
drive.mount('/content/drive')

"""# **Para poder utilizar una foto**"""

from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode

def take_photo(filename='photo.jpg', quality=1):
  js = Javascript('''
    async function takePhoto(quality) {
      const div = document.createElement('div');
      const capture = document.createElement('button');
      capture.textContent = 'Capture';
      div.appendChild(capture);

      const video = document.createElement('video');
      video.style.display = 'block';
      const stream = await navigator.mediaDevices.getUserMedia({video: true});

      document.body.appendChild(div);
      div.appendChild(video);
      video.srcObject = stream;
      await video.play();

      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);

      await new Promise((resolve) => capture.onclick = resolve);

      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 1, 1);
      stream.getVideoTracks()[0].stop();
      div.remove();
      return canvas.toDataURL('content/drive/MyDrive/Proyecto/image/jpeg', quality);
    }
    ''')
  display(js)
  data = eval_js('takePhoto({})'.format(quality))
  binary = b64decode(data.split(',')[1])
  with open(filename, 'wb') as f:
    f.write(binary)
  return filename

from IPython.display import Image
try:
  filename = take_photo()
  print('Saved to {}'.format(filename))
  
  display(Image(filename))
except Exception as err:

  print(str(err))

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
#cv2_imshow(img)
cv2.waitKey(0)
cv2.destroyAllWindows()

img = cv2.imread ('photo.jpg')
img.shape

H,W,C = img.shape
print (H,W,C)

#para imagen de camara 
#seleccionamos parte superior derecha 
cropped_img = img [:150,350:500,:]
cv2_imshow(cropped_img)

cropped_img_bottom = img[200:480,350:500,:]
cv2_imshow (cropped_img_bottom)

"""# **Utilizamos la imagen escaneda**"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
#cv2_imshow(img)
cv2.waitKey(0)
cv2.destroyAllWindows()

img = cv2.imread ('escaneada.jpeg')
img.shape

H,W,C = img.shape
print (H,W,C)

#para imagen horizontal 
#modificamos tamaño
img_horizontal = cv2.resize(img, (1200, 900)) 
cv2_imshow(img_horizontal)
img_horizontal.shape

#seleccionamos parte superior derecha
cropped_img = img_horizontal[:300,650:1200,:]
cv2_imshow(cropped_img)

#seleccionamos la parte inferior de abajo
cropped_img_bottom = img_horizontal [500:900,650:1200,:]
cv2_imshow (cropped_img_bottom)

"""# **Utilizamos pipeLine de Keras-ocr**"""

pipeline = keras_ocr.pipeline.Pipeline()

images = [
    keras_ocr.tools.read(images) for images in [
        cropped_img,
        cropped_img_bottom
            ]
]

prediction = pipeline.recognize(images)

"""## **Tenemos la imagen preliminar con los datos predichos**"""

fig, axs = plt.subplots(nrows=len(images), figsize=(20,20))
for ax, image, predictions in zip(axs, images, prediction):
    keras_ocr.tools.drawAnnotations(image=image, predictions=predictions, ax=ax)

"""## **Llevamos los datos a Pandas para su manipulacion**"""

df = pd.DataFrame(prediction)
df

[fil,col]=df.shape

prueba_df = df.fillna('Sin dato')
prueba_df

for i in range(col): 
    prueba_df.iloc [0,i] = prueba_df[i][0][0]  
    prueba_df.iloc [1,i] = prueba_df[i][1][0]  
    

 
prueba_df

final_df=prueba_df.astype('string')

final_df_1 = final_df.drop([1])
final_df_2 = final_df.drop([0])

nit= '0000000'
for i in final_df_1:
 if (final_df_1[i][0]== 'nit'):
   
   nit=final_df_1[i+1][0]

factura ='000000'
for i in final_df_1:
 if (final_df_1[i][0]== 'factura'):
   
   factura=final_df_1[i+1][0]

autorizacion ='000000000'
for i in final_df_1:
 if (final_df_1[i][0]== 'autorizacion'):
   
   autorizacion=final_df_1[i+1][0]

bs ='0.0'
for i in final_df_2:
 if (final_df_2[i][1]== 'bs'):
   
   bs=final_df_2[i+1][1]

export_final = pd.DataFrame(np.zeros((1, 5)))
export_final.columns = ['Nº','NIT Proveedor','Nº Factura','N° Autorización','Importe Total']

export_final

x_df = export_final

x_df.loc[0,'NIT Proveedor'] = nit
x_df.loc[0,'Nº Factura'] = factura
x_df.loc[0,'N° Autorización'] = autorizacion
x_df.loc[0,'Importe Total'] =bs

x_df

"""## **Pasamos los datos a CSV**"""

x_df.to_csv('facturas.csv', encoding='utf-8')
print('El DataFrame de las facturas fue guardado en un archivo CSV.')

writer = pd.ExcelWriter('output.xlsx')

x_df.to_excel(writer)

writer.save()
print('El DataFrame de las facturas fue guardado en un archivo Excel.')

